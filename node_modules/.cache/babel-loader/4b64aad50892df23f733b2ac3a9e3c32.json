{"ast":null,"code":"var _jsxFileName = \"/Users/kostya/projects/react/HardWork/\\u041D\\u043E\\u0432\\u0430\\u044F \\u043F\\u0430\\u043F\\u043A\\u0430/foodify_aplication/src/components/dishIItem.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport Card from '@mui/material/Card';\nimport CardActions from '@mui/material/CardActions';\nimport CardContent from '@mui/material/CardContent';\nimport CardMedia from '@mui/material/CardMedia';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getData } from '../redux/actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Dish() {\n  _s();\n\n  let image;\n  let ingridient = [];\n  const dispatch = useDispatch();\n  const data = useSelector(state => state.dish.data);\n  const dataDish = data.meals;\n  console.log(dataDish);\n  useEffect(() => {\n    dispatch(getData());\n  }, [dispatch]);\n\n  if (dataDish.length > 0) {\n    dataDish.meals[0].strMealThumb !== undefined ? image = dataDish.meals[0].strMealThumb : image = 'https://res.cloudinary.com/crunchbase-production/image/upload/c_lpad,f_auto,q_auto:eco,dpr_1/v1479829522/bxpgav8mvdsibvxctd1d.jpg';\n    let ing = [dataDish.meals[0].strIngredient1, dataDish.meals[0].strIngredient2, dataDish.meals[0].strIngredient3, dataDish.meals[0].strIngredient4, dataDish.meals[0].strIngredient5, dataDish.meals[0].strIngredient6, dataDish.meals[0].strIngredient7, dataDish.meals[0].strIngredient8, dataDish.meals[0].strIngredient9, dataDish.meals[0].strIngredient10, dataDish.meals[0].strIngredient11, dataDish.meals[0].strIngredient12, dataDish.meals[0].strIngredient13, dataDish.meals[0].strIngredient14, dataDish.meals[0].strIngredient15, dataDish.meals[0].strIngredient16, dataDish.meals[0].strIngredient17, dataDish.meals[0].strIngredient18, dataDish.meals[0].strIngredient19, dataDish.meals[0].strIngredient20]; // eslint-disable-next-line no-useless-concat\n\n    ingridient = ing.filter(el => el.length > 1).map(el => el + ', ');\n  }\n\n  function ckip() {\n    dispatch(getData());\n  }\n\n  function addDish() {\n    dispatch({\n      type: 'ADD_DISH',\n      payload: {\n        data: dataDish\n      }\n    });\n  }\n\n  return (\n    /*#__PURE__*/\n    // (dataDish.length > 0) ?\n    //     <div className=\"dishItems\">\n    //         <Card sx={{ maxWidth: 545 }}>\n    //             <CardMedia\n    //                 component=\"img\"\n    //                 height=\"360\"\n    //                 image={image}\n    //                 alt=\"\" />\n    //             <CardContent>\n    //                 <Typography gutterBottom variant=\"h5\" component=\"div\">\n    //                     {dataDish.meals[0].strArea} , {dataDish.meals[0].strCategory}\n    //                 </Typography>\n    //                 <Typography variant=\"body2\" color=\"text.secondary\" >\n    //                     INGRIDIENTS:\n    //                     <br />\n    //                     {ingridient}\n    //                 </Typography >\n    //                 <Typography>\n    //                     INSTRUCTIONS:\n    //                     <br />\n    //                     {dataDish.meals[0].strInstructions}\n    //                 </Typography>\n    //             </CardContent >\n    //             <CardActions>\n    //                 <Button size=\"small\" onClick={ckip}>Skip</Button>\n    //                 <Button size=\"small\" onClick={() => addDish()}>Like </Button>\n    //             </CardActions>\n    //         </Card >\n    //     </div >\n    //     : <div> ... </div>\n    _jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }, this)\n  );\n}\n\n_s(Dish, \"8ZSi0OBRHkt2uIn6fVrA7mYaxeA=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = Dish;\nexport default Dish;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dish\");","map":{"version":3,"sources":["/Users/kostya/projects/react/HardWork/Новая папка/foodify_aplication/src/components/dishIItem.js"],"names":["React","useEffect","Card","CardActions","CardContent","CardMedia","Button","Typography","useDispatch","useSelector","getData","Dish","image","ingridient","dispatch","data","state","dish","dataDish","meals","console","log","length","strMealThumb","undefined","ing","strIngredient1","strIngredient2","strIngredient3","strIngredient4","strIngredient5","strIngredient6","strIngredient7","strIngredient8","strIngredient9","strIngredient10","strIngredient11","strIngredient12","strIngredient13","strIngredient14","strIngredient15","strIngredient16","strIngredient17","strIngredient18","strIngredient19","strIngredient20","filter","el","map","ckip","addDish","type","payload"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,OAAT,QAAwB,kBAAxB;;;AAIA,SAASC,IAAT,GAAgB;AAAA;;AAEZ,MAAIC,KAAJ;AACA,MAAIC,UAAU,GAAG,EAAjB;AACA,QAAMC,QAAQ,GAAGN,WAAW,EAA5B;AACA,QAAMO,IAAI,GAAGN,WAAW,CAACO,KAAK,IAAIA,KAAK,CAACC,IAAN,CAAWF,IAArB,CAAxB;AACA,QAAMG,QAAQ,GAAGH,IAAI,CAACI,KAAtB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;AAEAjB,EAAAA,SAAS,CAAC,MAAM;AACZa,IAAAA,QAAQ,CAACJ,OAAO,EAAR,CAAR;AACH,GAFQ,EAEN,CAACI,QAAD,CAFM,CAAT;;AAIA,MAAII,QAAQ,CAACI,MAAT,GAAkB,CAAtB,EAAyB;AACpBJ,IAAAA,QAAQ,CAACC,KAAT,CAAe,CAAf,EAAkBI,YAAlB,KAAmCC,SAApC,GAAiDZ,KAAK,GAAGM,QAAQ,CAACC,KAAT,CAAe,CAAf,EAAkBI,YAA3E,GACIX,KAAK,GAAG,mIADZ;AAEA,QAAIa,GAAG,GAAG,CACNP,QAAQ,CAACC,KAAT,CAAe,CAAf,EAAkBO,cADZ,EAENR,QAAQ,CAACC,KAAT,CAAe,CAAf,EAAkBQ,cAFZ,EAGNT,QAAQ,CAACC,KAAT,CAAe,CAAf,EAAkBS,cAHZ,EAINV,QAAQ,CAACC,KAAT,CAAe,CAAf,EAAkBU,cAJZ,EAKNX,QAAQ,CAACC,KAAT,CAAe,CAAf,EAAkBW,cALZ,EAMNZ,QAAQ,CAACC,KAAT,CAAe,CAAf,EAAkBY,cANZ,EAONb,QAAQ,CAACC,KAAT,CAAe,CAAf,EAAkBa,cAPZ,EAQNd,QAAQ,CAACC,KAAT,CAAe,CAAf,EAAkBc,cARZ,EASNf,QAAQ,CAACC,KAAT,CAAe,CAAf,EAAkBe,cATZ,EAUNhB,QAAQ,CAACC,KAAT,CAAe,CAAf,EAAkBgB,eAVZ,EAWNjB,QAAQ,CAACC,KAAT,CAAe,CAAf,EAAkBiB,eAXZ,EAYNlB,QAAQ,CAACC,KAAT,CAAe,CAAf,EAAkBkB,eAZZ,EAaNnB,QAAQ,CAACC,KAAT,CAAe,CAAf,EAAkBmB,eAbZ,EAcNpB,QAAQ,CAACC,KAAT,CAAe,CAAf,EAAkBoB,eAdZ,EAeNrB,QAAQ,CAACC,KAAT,CAAe,CAAf,EAAkBqB,eAfZ,EAgBNtB,QAAQ,CAACC,KAAT,CAAe,CAAf,EAAkBsB,eAhBZ,EAiBNvB,QAAQ,CAACC,KAAT,CAAe,CAAf,EAAkBuB,eAjBZ,EAkBNxB,QAAQ,CAACC,KAAT,CAAe,CAAf,EAAkBwB,eAlBZ,EAmBNzB,QAAQ,CAACC,KAAT,CAAe,CAAf,EAAkByB,eAnBZ,EAoBN1B,QAAQ,CAACC,KAAT,CAAe,CAAf,EAAkB0B,eApBZ,CAAV,CAHqB,CAyBrB;;AACAhC,IAAAA,UAAU,GAAGY,GAAG,CAACqB,MAAJ,CAAWC,EAAE,IAAKA,EAAE,CAACzB,MAAH,GAAY,CAA9B,EAAkC0B,GAAlC,CAAsCD,EAAE,IAAKA,EAAE,GAAG,IAAlD,CAAb;AACH;;AAED,WAASE,IAAT,GAAgB;AACZnC,IAAAA,QAAQ,CACJJ,OAAO,EADH,CAAR;AAGH;;AAED,WAASwC,OAAT,GAAmB;AACfpC,IAAAA,QAAQ,CAAC;AACLqC,MAAAA,IAAI,EAAE,UADD;AAELC,MAAAA,OAAO,EAAE;AAAErC,QAAAA,IAAI,EAAEG;AAAR;AAFJ,KAAD,CAAR;AAIH;;AAED;AAAA;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AA/BJ;AAkCH;;GAzFQP,I;UAIYH,W,EACJC,W;;;KALRE,I;AA+FT,eAAeA,IAAf","sourcesContent":["import React, { useEffect } from \"react\"\nimport Card from '@mui/material/Card';\nimport CardActions from '@mui/material/CardActions';\nimport CardContent from '@mui/material/CardContent';\nimport CardMedia from '@mui/material/CardMedia';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getData } from '../redux/actions'\n\n\n\nfunction Dish() {\n\n    let image\n    let ingridient = []\n    const dispatch = useDispatch();\n    const data = useSelector(state => state.dish.data)\n    const dataDish = data.meals;\n    console.log(dataDish);\n\n    useEffect(() => {\n        dispatch(getData())\n    }, [dispatch])\n\n    if (dataDish.length > 0) {\n        (dataDish.meals[0].strMealThumb !== undefined) ? image = dataDish.meals[0].strMealThumb :\n            image = 'https://res.cloudinary.com/crunchbase-production/image/upload/c_lpad,f_auto,q_auto:eco,dpr_1/v1479829522/bxpgav8mvdsibvxctd1d.jpg'\n        let ing = [\n            dataDish.meals[0].strIngredient1,\n            dataDish.meals[0].strIngredient2,\n            dataDish.meals[0].strIngredient3,\n            dataDish.meals[0].strIngredient4,\n            dataDish.meals[0].strIngredient5,\n            dataDish.meals[0].strIngredient6,\n            dataDish.meals[0].strIngredient7,\n            dataDish.meals[0].strIngredient8,\n            dataDish.meals[0].strIngredient9,\n            dataDish.meals[0].strIngredient10,\n            dataDish.meals[0].strIngredient11,\n            dataDish.meals[0].strIngredient12,\n            dataDish.meals[0].strIngredient13,\n            dataDish.meals[0].strIngredient14,\n            dataDish.meals[0].strIngredient15,\n            dataDish.meals[0].strIngredient16,\n            dataDish.meals[0].strIngredient17,\n            dataDish.meals[0].strIngredient18,\n            dataDish.meals[0].strIngredient19,\n            dataDish.meals[0].strIngredient20\n        ]\n        // eslint-disable-next-line no-useless-concat\n        ingridient = ing.filter(el => (el.length > 1)).map(el => (el + ', '))\n    }\n\n    function ckip() {\n        dispatch(\n            getData()\n        )\n    }\n\n    function addDish() {\n        dispatch({\n            type: 'ADD_DISH',\n            payload: { data: dataDish }\n        })\n    }\n\n    return (\n        // (dataDish.length > 0) ?\n        //     <div className=\"dishItems\">\n        //         <Card sx={{ maxWidth: 545 }}>\n        //             <CardMedia\n        //                 component=\"img\"\n        //                 height=\"360\"\n        //                 image={image}\n        //                 alt=\"\" />\n        //             <CardContent>\n        //                 <Typography gutterBottom variant=\"h5\" component=\"div\">\n        //                     {dataDish.meals[0].strArea} , {dataDish.meals[0].strCategory}\n        //                 </Typography>\n        //                 <Typography variant=\"body2\" color=\"text.secondary\" >\n        //                     INGRIDIENTS:\n        //                     <br />\n        //                     {ingridient}\n        //                 </Typography >\n        //                 <Typography>\n        //                     INSTRUCTIONS:\n        //                     <br />\n        //                     {dataDish.meals[0].strInstructions}\n        //                 </Typography>\n        //             </CardContent >\n        //             <CardActions>\n        //                 <Button size=\"small\" onClick={ckip}>Skip</Button>\n        //                 <Button size=\"small\" onClick={() => addDish()}>Like </Button>\n        //             </CardActions>\n        //         </Card >\n        //     </div >\n        //     : <div> ... </div>\n        <div></div>\n    )\n\n}\n\n\n\n\n\nexport default Dish;"]},"metadata":{},"sourceType":"module"}